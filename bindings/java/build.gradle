// See https://docs.gradle.org/current/userguide/native_software.html
// docker run --rm -it -v %cd%:/whisper.cpp/bindings/java --entrypoint /bin/bash nalbion/whisper-cpp-base

import org.gradle.internal.jvm.Jvm

plugins {
    id 'java'
    id 'java-library'
    id 'cpp'
}

//apply plugin: 'java-library'

archivesBaseName = 'whispercpp'
group = 'io.github.ggerganov'
version = '1.4.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

println "Building on OS: " + System.properties['os.name']
println "Using JDK: " + System.properties['java.home']

def SYS_INCLUDE_DIR = this.properties['system.include.dir']
def SYS_LOCAL_INCLUDE_DIR = this.properties['system.local.include.dir']
def JNI_INCLUDE_DIR = this.properties['jni.include.dir']
def JNI_LIB_DIR = this.properties['jni.lib.dir']

println "Using system include directory: " + SYS_INCLUDE_DIR
println "Using system local include directory: " + SYS_LOCAL_INCLUDE_DIR
println "Using JNI include directory: " + JNI_INCLUDE_DIR
println "Using JNI lib directory: " + JNI_LIB_DIR


/*buildscript {
    repositories {
        // Add necessary repositories
        mavenCentral()
    }
    dependencies {
        // Add Gradle plugin for Java library
        classpath 'java-library'
    }
}*/

/*sourceSets {
    main {
        java {
            // Specify the path to the Java source files
            srcDirs 'src/main/java'
        }
        // Specify the path to the C++ header files
        headers.srcDirs 'src/main/cpp'
        // Specify the path to the C++ source files
        cpp.srcDirs 'src/main/cpp'
    }
}*/


//model {
//    platforms {
//        /*x86 {
//            if (operatingSystem.macOsX) {
//                architecture "x64"
//            } else {
//                architecture "x86"
//            }
//        }*/
//        x64 {
//            architecture "x86_64"
//        }
//    }

//    components {
//        // TODO: rename "whispercpp"?
//        whispercpp(NativeLibrarySpec) {
//            targetPlatform "x64"
////            binaries.all {
////                def jvmHome = Jvm.current().javaHome
////                if (targetPlatform.operatingSystem.macOsX) {
////                    cCompiler.args '-I', "${jvmHome}/include"
////                    cCompiler.args '-I', "${jvmHome}/include/darwin"
////                    cCompiler.args '-mmacosx-version-min=10.4'
////                    linker.args '-mmacosx-version-min=10.4'
////                } else if (targetPlatform.operatingSystem.linux) {
////                    cCompiler.args '-I', "${jvmHome}/include"
////                    cCompiler.args '-I', "${jvmHome}/include/linux"
////                    cCompiler.args '-D_FILE_OFFSET_BITS=64'
////                } else if (targetPlatform.operatingSystem.windows) {
////                    cCompiler.args "-I${jvmHome}/include"
////                    cCompiler.args "-I${jvmHome}/include/win32"
////                } else if (targetPlatform.operatingSystem.freeBSD) {
////                    cCompiler.args '-I', "${jvmHome}/include"
////                    cCompiler.args '-I', "${jvmHome}/include/freebsd"
////                }
////            }
//            sources {
//                cpp {
//                    source {
//                        srcDir 'src/main/c'
//                        include '**/*.c'
//                    }
//
//                    exportedHeaders {
//
//                        srcDirs 'build/generated/sources/headers/java/main'
//                    }
////                    cppCompiler.args '-Isrc/main/cpp'
//                }
//            }
//        }
//    }
//
//    binaries {
//        all {
////            cppCompiler.args '-I../..'
////            cppCompiler.args '../../whisper.o' // Link the external object file
////            sharedLibraryFile = file("$buildDir/libs/whispercpp/shared/libwhispercpp.so")
////            if (OperatingSystem.current().isLinux()) {
////                cCompiler.args "-L../../", "-lwhisper"
////            } else if (OperatingSystem.current().isMacOsX()) {
////                cCompiler.args "-Wl,-rpath,@loader_path/../../", "-L../../", "-lwhisper"
////            }
//        }
//
////        all {
////            cppCompiler.define "NDEBUG"
////
////            if (toolChain in Gcc) {
////                cppCompiler.args "-O2", "-fno-access-control"
////                linker.args "-Xlinker", "-S"
////            }
////            if (toolChain in VisualCpp) {
//////                cppCompiler.args "/Zi"
//////                linker.args "/DEBUG"
////            }
////        }
//    }
//    toolChains {
////        visualCpp(VisualCpp) {}
//        gcc(Gcc) {
//            eachPlatform {
//                if (System.properties['os.name'].startsWith('Windows')) {
//                    throw new Exception("Build on Windows is not implemented")
////                    cppCompiler.withArguments { args ->
////                        args << "-I" + JNI_INCLUDE_DIR
////                    }
//                } else if (System.properties['os.name'].equals('Mac OS X')) {
//                    cppCompiler.withArguments { args ->
//                        args << "-O2"
//                        args << "-I${rootDir}/../.."
//                        args << "-I" + SYS_INCLUDE_DIR
//                        args << "-I" + SYS_LOCAL_INCLUDE_DIR
//                        args << "-I" + JNI_INCLUDE_DIR
//                        args << "-I" + JNI_INCLUDE_DIR + "/darwin"
//                        args << "-std=c++11"
//                    }
//                    linker.withArguments { args ->
//                        args << "-O2"
//                        args << "-lc++"
//                    }
//                } else {
////                    path "/opt/rh/devtoolset-2/root/usr/bin/gcc"
//                    cppCompiler.withArguments { args ->
//                        args << "-O2"
//                        args << "-I${rootDir}/../.."
//                        args << "-I" + SYS_INCLUDE_DIR
//                        args << "-I" + SYS_LOCAL_INCLUDE_DIR
//                        args << "-I" + JNI_INCLUDE_DIR
//                        args << "-I" + JNI_INCLUDE_DIR + "/linux"
//                        args << "-std=c++11"
//                    }
//                    linker.withArguments { args ->
//                        args << "-O2"
//                        args << "-lstdc++"
//                    }
//                }
//            }
//        }
//        clang(Clang) {
////            eachPlatform {
////                if (System.properties['os.name'].equals('Windows')) {
////
////                } else if (System.properties['os.name'].equals('Mac OS X')) {
////                    cppCompiler.withArguments { args ->
////                        args << "-O2"
////                        args << "-I" + SYS_INCLUDE_DIR
////                        args << "-I" + SYS_LOCAL_INCLUDE_DIR
////                        args << "-I" + JNI_INCLUDE_DIR
////                        args << "-I" + JNI_INCLUDE_DIR + "/darwin"
////                        args << "-std=c++11"
////                    }
////                    linker.withArguments { args ->
////                        args << "-O2"
////                        args << "-lc++"
////                    }
////                } else {
////                    cppCompiler.withArguments { args ->
////                        args << "-O2"
////                        args << "-I" + SYS_INCLUDE_DIR
////                        args << "-I" + SYS_LOCAL_INCLUDE_DIR
////                        args << "-I" + JNI_INCLUDE_DIR
////                        args << "-I" + JNI_INCLUDE_DIR + "/linux"
////                        args << "-std=c++11"
////                    }
////                    linker.withArguments { args ->
////                        args << "-O2"
////                        args << "-lstdc++"
////                    }
////                }
////            }
//        }
//    }
//}

/*task copyLibBridge(type: Copy) {
    if (System.properties['os.name'].equals('Mac OS X')) {
        from "../build/bin/Release/whisper-bin.dylib"
    }
    else {
        from "../build/bin/Release/whisper-bin.so"
    }
    into 'libs'
}*/

repositories {
    mavenCentral()
}

dependencies {
    implementation "net.java.dev.jna:jna:5.13.0"
    testImplementation "org.junit.jupiter:junit-jupiter:5.9.2"
    testImplementation "org.assertj:assertj-core:3.24.2"
}

java {
    withSourcesJar()
    withJavadocJar()
}

//tasks.register('generateJniHeader', JavaCompile) {
//    source = sourceSets.main.java
//    classpath = sourceSets.main.compileClasspath
//    destinationDirectory = sourceSets.main.output.generatedSourcesDirs
//    options.compilerArgs += ['-h', 'src/main/cpp']
//}
//
//compileJava.dependsOn(generateJniHeader)

tasks.withType(Test) {
    useJUnitPlatform()
}

/*publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'whispercpp'
            from components.java
            pom {
                name = 'whispercpp'
                description = "Java JNI bindings for OpenAI's Whisper model, implemented in C/C++"
                url = 'https://github.com/ggerganov/whisper.cpp'
                licenses {
                    license {
                        name = 'MIT licence'
                        url = 'https://raw.githubusercontent.com/ggerganov/whisper.cpp/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'nalbion'
                        name = 'Nicholas Albion'
                        email = 'nalbion@yahoo.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/ggerganov/whisper.cpp.git'
                    url = 'https://github.com/ggerganov/whisper.cpp'
                }
            }
        }
    }
}*/
